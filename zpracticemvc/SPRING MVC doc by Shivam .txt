                                                //  Learning spirng mvc from youtube code with durgesh lectures

1.)Create the tomcat server  download tomcat 9 zip file. and extract it to the practice_eclipse folder in e drive

2.) configure : eclipse window -> preference ->server ->runtime environment ---------  select(add) apache version 9 ->next and in browse : select folder of parent directory of bin.  then fininsh .  
And try your server. window ->show view ->server 
(if 1 time user) : then chooose the new server by right click and select tomcat 9 and also start your server and on goolge type localhost:8080

STARTING MVC PROJECT:

3).make a new maven project and choose the archtype-webapp  in categlog internal. and create springmvc project . and keep internet on and done.

4).
Configure Spring with Tomcat :


Now error comes beacause index.jsp has not server runtime libraries . To Solve right click your project and choose buildpath

Springmvc -> buildpath  -> configbuild_path -> libraries tab -> addserver runtime ->  tomcat 9 libraries .

Inject mvc dependency from google in pom.xml , (do check the force install option if they do not import successfully ,in maven dependencies folder ) MVC itself install other required dependencies like core, context, etc


5).     IMPORTANT 5 STEPS : 

  A).CONFIGURE THE DISPATHCHER SERVLET  (front controller) IN WEB.XML and  also map the servlet. in web.xml file 

  B).CREATE THE SPRING CONFIGURATION (spring-servlet.xml) FILE in WEB-INF folder
  
  C).CONFIGURE VIEW RESOLVER in .xml file
  
  D). CREATE CONTROLLER in pack cntroler in src/main/java
  
  E).  CREATE A VIEW TO SHOW PAGE   create jsp files of methods declare in HOmeCOntroller


6).   In web.xml file create the servlet tag and create it , to search the class name of servlet can use CTRL + SHIFT + T in any java class and then search DispatherServlet and can copy package and class name from there , no need to byheart .

And then also map the servlet declared with url pattern::  / to handle all the url requests

7). Create Configuration file ::::   ( servletname-servlet.xml ) file : inside web inf folder ,copy data from previous config.xml file and remove extra beans. 

8). create bean view  resolver and adject its 2 properties 
   a-> give the prefix -> containing folder   /WEB-INF/views/
   b-> give suffix -> ending of the page      .jsp

   path of page is :    /WEB-INF/views/  ________  .jsp

9). Make the controller class inside springmvc.controller package
   and put annotation @Controller 
   
   -> also mantain @RequestMappping("/home")  to tell when will this function work on writing url or /home is fired .

10). Now we need to create the "index".jsp page in views folder(if not present the create views folder.) 
In views folder create new jsp file : index.jsp , and can delete old index present in WEB-INF
   

   Last step is to enable the @Controller annotation by <context:component-scan base-package="path where u used @Controller" >


 At last save and run the springmvc project with server.

localhost:8080/springmvc/home

Simlarly create other method contacts , etc and run them from HomeController class
 ___________________________________________________________________________________________


VIDEO : 

************* SENDING THE DATA FROM CONTROLLER TO VIEW ()

ie not need to write static data in view pages, instead supply data from controller , which can be extracted out in views.jsp files.




Use these method to send data
Just pass the Model obj in () of method in HomeContl class and use Addattribute()

METHOD 1:  (mostly used)
_______________________________________
-> model object : First import util.List in index.jsp : paste this in top  <%@ page import = "java.util.*"%>  

         -> In HomeCntrler :
          Take model obj in parameter of method and use 
          model.addAtribute(String key, Obj val)

         ->In JSP file : get data using scripplet tag  <% String name = (String) request.getAttribute("key") %>   also typecast it 
         ->And then finally print <%=name %>

         -> to print the list: loop is used out.println()  ......look code

Alternate to using scripplet tag to extract data :  is expression lang : which can be ${name} , can be enalbed using <%@ page isELIgnored="false" %>  at top of jsp file

______________________________________________
METHOD 2 :

->ModelAndView object   ->addObject(String key , Obj val)

Make new controller to show model view 
1. make @requestmapping("/help") and define a method named help 

@RequestMapping("/help")
public ModelAndView helpp()
{
ModelAndView modelAndView= new ModelAndView();

System.out.println("this is help [page] ");
    return "modelAndView";

    modelAnsView.addObject("name","Rai" );
     modelAndview.setViewName("help");      
     // generally this was return in previous method.(ie the jsp page will is displayed upon firing in url)

}

2. create view (help.jsp file ) in views folder.
 
 And rest part is same just get.Arribute("key") and display using scriplit tag



 TIP:    WHat ever Additional features you are using just , import them at top under
   <%@ page import="java.util.*"%>



   _____________________________________________________________________________________________________________

11).  Quiclky access SENT DATA :

 Video: 57   Using jsp expression and JSTL

Now we will learn : how to direcly use expression lang to avoid repetitive use of getattribute method. 

ALso at top of .jsp file make

<%@ page isELIgnored="false" %>  , ie now ${name} will be working. 


To access a list directly print it {list} or jstl



TO ACCESS LIST  ELEMENTS IN FOR EACH LOOP ::::::

Use JSTL :
to access in for-each loop -> for each element access.

12). Applied all these concept in About.jsp
  
  a>
  Inject JSTL dependecy in pom.xml
  
  b>
  Also insert the <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>  at top of the .jsp file.

  So use now using this to access ele of list "marks"
  <c:forEach var="item" items="${marks}">
  <h1>  ${item} </h1>                            or can use here  <h1>  <c:out value="${item }"><h1>
  </c:forEach>


  _________________________________________________________________________________________________________________________

   Video 58

  13). Send data from view(form) to Controller(beckend) 


       View              --------------------->   Controller 
   (Html form)                           (HttpServletRequest)
  

  Getting the data from Controller 
  using getParameter("field name")   ---->  old method 

  Now in spring use 
  @RequestParam          ---> get one -one field 
  @ModelAttribute        ---> take all object data / full form  

__________________________________________________________
Video : 59

@RequestMapping -->>
i) can be applied to method to map 
 handler method to use  url : /home  

ii) can be applied to class so that all other method extned that
   eg class mapping  /appoint 
    ie  now methods url will be relat ive to class url
   eg /appoint/home/

Using RequestMapping we can also given method type (path and value can be used both same meaning )

@RequestMapping(path="/home" , method= RequestMethod.GET)


______________________________________________________________
Video : 60 

Make New view contact.jsp and design a form using bootstracp

Also make a new controller  , in samepackage ContactController
 to handle the submission of form :

 Now take the 3 required field of form Email, UserNAme,Password.
 Now for <form  action="processform" method="post"> we have give relative url="processform" not absolute url="/processform"  , also method is post so take care while taking out data using @RequestMapping to give value/path and the method type

 Now go to HomeController and design the handle method to support the processform url fireing

:We have used @RequestParam to fetch the field from  "form" submission , And Model Object (model.addAttribute) to send the attributes to another jsp page so that there they can be extracted out using expression language ${name }


____________

 @RequestMapping(path="/processform" , method = RequestMethod.POST)
    public String handleform(@RequestParam("email") String userEmail ,
            @RequestParam("userName") String userName ,
            @RequestParam("password") String userPassword  , Model model)
    {                                   
   model.addAttribute("name",userName);
  model.addAttribute("email",userEmail);
  model.addAttribute("password",userPassword);

  return "success";
    }
___________________________________________

Include isElIgnored=false at top of file

In success.jsp page just fetch the data using expression language.


Then run the project and fire
 http://localhost:8080/zpracticemvc/contact


By default the argu of requestParam are true ie valued needed can also make value as optional to enter
@RequestParam(name="email" , required= true) String userEmail 

-----------------------------------------------------------
// FUll code of Handle method , till we have not used ModelAttribute
/*************************************************8

@RequestMapping(path="/processform" , method = RequestMethod.POST)
    public String handleform(@RequestParam(name="email" , required= true) String userEmail ,
            @RequestParam("userName") String userName ,
            @RequestParam("password") String userPassword  , Model model)
    {
  
User user = new User();
user.setEmail(userEmail);
user.setUserName(userName);
user.setPassword(userPassword);

  System.out.println("User mail is "+ userEmail  );
  System.out.println("User Name is "+ userName  );
  System.out.println("User Password is "+ userPassword  );
  
  //process data
  
  
  //sending data to view using Model
  model.addAttribute("name",userName);
  model.addAttribute("email",userEmail);
  model.addAttribute("password",userPassword);
  
  
  return "success";
    }

*********************************************/






_______________________________________________________________

Video 62 :       VERY IMP 

USE 1::::::::::::::

@ModelAttribute annotation : VERY IMP it does 3 works 

 1.It fetches the data from form :( DOING WORK OF REQUESTPARAM to fetch details from from submission. )
 2.It assign Fiedls to Entity class Eg userName, Password , Email to user data : helpfull to display user.
 3.It also send the data to next Jsp page:DOING WORK OF MODEL.ADDATTRRIBUTE

IMP: Mapping should be correct ie name used  in "form" should be same as name used  in User/Entity class


---
Intermeditate practice :using obj of class User to display and set fields instead of individual displaying fields display full user obj:
 Now we are making the Object of Model (User class) , whhich has fieds userName, email,password .
 Now  Also : only single object of user will be added using model.addAttribute(user);
 And in jsp file also accessing by user.userName etc ;
----

NOW JUST Replace all code using @ModelAttribute in one line code



Use 2:::::::::
 Another use of @ModelAttribute is to keep the repetive code of all jsp pages together, 
  eg we have used Header and desc in both pages success.jsp and contact .jsp

 That is each time when the all jsp pages started first of all : @modelattribute method  content will be added there ie before handles method run : see console



 __________________________________________________________________________________



VERY IMPORTANT : SAVING DATA OF USER FROM HTML FORM TO DATABASE TABLE

 Video 63 .....................................................

 Spring orm + spring mvc configuration:

Follow layer Structures

CONTROLLER LAYER -----> SERVICE LAYER -----> DAO LAYER (use hibernate obj to access)-----> DATABASE

 Configure Spring orm
 STEP-1:

  add spring orm dependency , hibernate dependecy , mysql connector dependency.
STEP- 2.

 Make the classes UserDao at DAO package to access Database
    
    Now declare the method to save 
   
   //declare save method

 // spring ; automatically inject obj of it , just need to  decalre the bean of its class in .xml file
   
    @Autowired
    HibernateTemplate hibernateTemplate;
    
    public int saveUser(User user)
    {
     int id=(Integer)this.hibernateTemplate.save(user) ;
    return id;   //return id of saved user.
    }

    the user object, 
    We need hibernateTemplate obj to access database (@Autowired)
    Also enable the writing mode @Transational (wheneven we add/update the data in database this is used):
    Working dicussed in orm and jdbc lectures

STEP-3.

Declare the User class as
@Entity so table create for it in database    :
            Also this time take take another attribute private int id
            
@id
@GeneratedValue(strategy=GenerationType.AUTO) in user Table


STEP-4.

Make the service layer class : which access UserDao 
Make UserService under springmvc.service package

Here we use the UserDao obj (@autowired) to save the created user

delcare UserDao obj and call its save method from here 

eg

  @Autowired             //means obj will be given by spring
 private UserDao userDao
 public int createUser(User user)
 {return this.userDao.saveUser(user);
 }

 5.
 Now use the controller class
 and declare the var of UserService and call the createUser method of it in handleForm method

 @Autowired 
 UserService userService;

 public String handleForm()
 {
/...

this.userService.createUser();
retun "succes";

 }


So indirectly 

Controller has (UserService obj)   ----->    UserService has(UserDAo obj) --------> UserDao (has hibernateTemplate obj ) ---> Then DATABASE accessed


IMP:

Since we have used the @Autowired for obj creating so they must be declared in .xml files 

Or use this shortcut Annotaion instead of giving xml defination of beans for them

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
New Shortcut Notations:

@Service 
---place this at UserService class (SERVICE LAYER), 
so spring will understand this is service class and it will inject its obj to @Autowired use for obj creation

@Repository
---place this at UserDao class      (DAO LAYER)
so spring will understand this is Database layer / data access obj class , so spring will inject its obj to @Autowired use for obj creation of UserDao

--------------------------------
NOW TO MAKE ALL THESE CONFIGURATION WORKING / ANNOTAION WORKING , ENABLE THEM IN SPRING-SERVLER.XML FILE

WE ARE changing the context :component Scan to full project name "springmvc" : ie it will scan all its sub packages and make all  annotations fully funtional


-------------------------------------
Also we have Configured every other classes like Dao, services, but not the hibernate template.
So declare this in .xml file

***** HEre we imported all configuration from springorm we have configured hibernate Template class.(REfer video of Spring orm )


Basically we need 
----> HIBERNATE_TEMPLATE class 
----> which need SESSION_FACTORY (modify code of the entity to springmvc.model.User) 
----> which further need DATA_SOURCE (ds)
----> which furtehr need the setting configuration of DRIVER_MANAGER_DATA_SOURCE (ie setting driver, userName, password of database used)


________________________________________________________________________

Wrting mode error --------------- comming because hibernatetempalte obj is not able to open session so

Lastly to do the update/add operation on database we need @Transactional , which need to define 

HibernateTransactionManager class in .xml which takes session factory (alredy defined)


******* So first put @Transactional above the saveUser method in UserDao class ,  or whereever u are calling chages in database like save , update etc

so declare this class ----------------> hiberenateTrasactionManager class as a bean in.xml






Also at top : write the <tx:annotation -driven /> 

-->need to define the schema for this  tx : so just copy paste p schema and replace the tx inplace of p :

-->Also last two lines copy and replace the "context" with "tx"
   in last to line of context .
 
Now Submit the form : And see the updated table in your database 

Success --
 ************************************************************************************************************************************************************************************************


 ___________________________________________________________________________________________________________________________________

 Video 64:

 How to redirect in spring mvc: That is when we fire one page url it redirect to other page

 0) HttpServletResponse: we can use this old method : take argument of HttpSErvletResponse in method and call response.sendRedirect(); //also handle exveption in this case

 1)redirect prefix
 2)Redirect View

 Make a class Recontroller @Controller - this is enabled already in .xml by scanning the component Scan "zpractivemvc" package
 Define the methods in ReController : to use redirect just return from method 

@requestMapping("/one")
public String one()
{ system.out.println("this is one handler");
 return "redirect:/enjoy" ;                        // this is redirect prefix

}

@RequestMapping("/enjoy")
public String two()
{
    System.out.println("this is two method");
    return "";
}

Method 2:
Using redirect view : we have to return the object of redirectView

@RequestMapping("/three")
    public RedirectView three()
    {
        System.out.println("This is three handler runnning the redirect view");
        RedirectView redirectView= new RedirectView();
        redirectView.setUrl("https://www.google.com");  //("contact")   // need to given relative path only contact,  not /contact it will lost the project name 
        return redirectView;   
    }


    ZPRACTICEMVC IS FULLY WORKING CONCEPT OF SPRING MVC CONCEPTS

___________________________________________________________________________________________________________________________


Video 65 : PROJECT ON REDIRECT VIEW : Search Engine 